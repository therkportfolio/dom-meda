Sub CollateOTFiles()
    Dim folderPath As String
    Dim selectedFile As Variant
    Dim excelApp As Object
    Dim wb As Object
    Dim ws As Object
    Dim newWB As Object
    Dim newWS As Object
    Dim rowCounter As Long
    
    Dim sourceRow As Range
    Dim cell As Range
    Dim isEmpty As Boolean

    Dim formula As String
    Dim formuladate1 As String
    Dim formuladate2 As String
    Dim cellvar As String
    Dim cellvardate As String

    ' Prompt the user to select a folder
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select Folder"
        .Show
        If .SelectedItems.Count = 0 Then Exit Sub
        folderPath = .SelectedItems(1) & Application.PathSeparator
    End With
    
     ' Create a new workbook to record the file names
    Set newWB = Workbooks.Add
    Set newWS = newWB.Sheets(1)
    newWS.Cells(1, 1).Value = "Pay No"
    newWS.Cells(1, 2).Value = "Date From"
    newWS.Cells(1, 3).Value = "Date To"
    newWS.Cells(1, 4).Value = "Payroll No"
    newWS.Cells(1, 5).Value = "Position"
    newWS.Cells(1, 6).Value = "Surname"
    newWS.Cells(1, 7).Value = "First Name"
    newWS.Cells(1, 8).Value = "Unit"
    newWS.Cells(1, 9).Value = "Date of Overtime"
    newWS.Cells(1, 10).Value = "Reason for Overtime"
    newWS.Cells(1, 11).Value = "Unable to handover becuase"
    newWS.Cells(1, 12).Value = "Start of Unrostered Overtime"
    newWS.Cells(1, 13).Value = "End of Unrostered Overtime"
    newWS.Cells(1, 14).Value = "Total time"
    
    ThisWorkbook.Sheets("PayPeriods").Copy After:=newWB.Sheets(1)
    
    rowCounter = 2
    
     ' Get all Excel files in the selected folder
    selectedFile = Dir(folderPath & "*.xlsx")
    
    
     ' Complex loops doing the transferring
    Do While selectedFile <> ""
        Set excelApp = CreateObject("Excel.Application")
        Set wb = excelApp.Workbooks.Open(folderPath & selectedFile)
        Set ws = wb.Sheets(1)
        
        For Each sourceRow In ws.Range("A11:A25").Rows
            isEmpty = True ' Assume the row is empty initially
            
            ' If the row is not empty, copy the first 4 cells to the target sheet
            If sourceRow.Cells(1).Value <> "" Then
                cellvar = "I" & rowCounter
                cellvardate = "A" & rowCounter
                formula = "=LOOKUP(2,1/(PayPeriods!B:B<=" & cellvar & ")/(PayPeriods!C:C>=" & cellvar & "),PayPeriods!A:A)"
                formuladate1 = "=VLOOKUP(" & cellvardate & ",PayPeriods!A:C,2,0)"
                formuladate2 = "=VLOOKUP(" & cellvardate & ",PayPeriods!A:C,3,0)"
                
                newWS.Cells(rowCounter, 1).formula = formula
                newWS.Cells(rowCounter, 2).formula = formuladate1
                newWS.Cells(rowCounter, 3).formula = formuladate2
                newWS.Cells(rowCounter, 4).Value = ws.Range("A4").Value
                newWS.Cells(rowCounter, 5).Value = ws.Range("B4").Value
                newWS.Cells(rowCounter, 6).Value = ws.Range("C4").Value
                newWS.Cells(rowCounter, 7).Value = ws.Range("D4").Value
                newWS.Cells(rowCounter, 8).Value = ws.Range("E4").Value
                newWS.Cells(rowCounter, 9).Value = sourceRow.Columns("A").Value
                newWS.Cells(rowCounter, 10).Value = sourceRow.Columns("B").Value
                newWS.Cells(rowCounter, 11).Value = sourceRow.Columns("C").Value
                newWS.Cells(rowCounter, 12).Value = sourceRow.Columns("I").Value
                newWS.Cells(rowCounter, 13).Value = sourceRow.Columns("L").Value
                newWS.Cells(rowCounter, 14).Value = sourceRow.Columns("M").Value
                
                newWS.Columns("L").NumberFormat = "hh:mm"
                newWS.Columns("M").NumberFormat = "hh:mm"
                newWS.Columns("N").NumberFormat = "0.00"
                newWS.Columns("B").NumberFormat = "dd/mm/yyyy"
                newWS.Columns("C").NumberFormat = "dd/mm/yyyy"
                newWS.Columns("I").NumberFormat = "dd/mm/yyyy"
                
                rowCounter = rowCounter + 1
                
            End If
        Next sourceRow
        
        wb.Close SaveChanges:=False
        excelApp.Quit
        selectedFile = Dir
    Loop
       

    ' Save and close the new workbook
    newWB.Sheets(1).Activate
    newWB.SaveAs folderPath & "CollatedOT.xlsx"
    newWB.Close SaveChanges:=False
    
    ' Cleanup
    Set ws = Nothing
    Set wb = Nothing
    Set excelApp = Nothing
    Set newWS = Nothing
    Set newWB = Nothing
    
    MsgBox "Operation complete. Check the folder for 'CollatedOT.xlsx'."
    
End Sub

